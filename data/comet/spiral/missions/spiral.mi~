#  spiral mission Comet
#
# lmm=lucas.merckelbach@hzg.de
#
# runs the glider in spiral mode 
# sets heading by fin position
# ma files:
#      surfac31.ma (stack idle)
#      surfac30.ma (nocomms every n hours)
#      yo30.ma
#      sample30.ma ctd
#      sample31.ma flntu
#      sample33.ma microstructure
#      sample34.ma dvl

sensor: u_use_current_correction(nodim) 0
sensor: u_dbd_sensor_list_xmit_control(enum)  2 # header if not sent before
sensor: u_sci_dbd_sensor_list_xmit_control(enum)  2 # header if not sent before
sensor: c_ctd41cp_num_fields_to_send(nodim) 4
# using c_science_all_on controls all sensors at once, which is not
# what we want. Disable it altogether.
sensor: c_science_all_on_enabled(bool) 0

#####################################################################################################

behavior: abend
                                                 # MS_ABORT_OVERTIME
    b_arg: overtime(s)                      -1   # < 0 disables
    b_arg: samedepth_for(s)                600   # < 0 disables
    b_arg: samedepth_for_sample_time(s)     30   # how often to check
    b_arg: max_wpt_distance(m)          300000   # MS_ABORT_WPT_TOOFAR (300 km)
    b_arg: stalled_for(sec)                 -1   # <0 disables


# safety net, make sure the glider calls in every n hours 
# make sure that this is the first surface behaviour.
behavior: surface
    b_arg: start_when(enum)          12  # 
    b_arg: when_secs(sec)     43200      # How long between surfacing,
					 # only if start_when==6,9, or
					 # 12 Arguments for climb_to
					 # when going to surface
    b_arg: c_use_bpump(enum)      2
    b_arg: c_bpump_value(X)  1000.0
    b_arg: c_use_pitch(enum)      3  # servo on pitch
    b_arg: c_pitch_value(X)  0.4363  # 25 degrees
    b_arg: end_action(enum)          1   # 0-quit, 1 wait for ^C quit/resume, 2 resume
    b_arg: gps_wait_time(s)        300   # how long to wait for gps
    b_arg: keystroke_wait_time(s)  300   # how long to wait for control-C
    b_arg: strobe_on(bool)         1     # switch off the strobe light.

# Bring glider to the surface when the yo finishes.
behavior: surface
    b_arg: start_when(enum)          1  # stack idle
    b_arg: args_from_file(enum)     11  # read from mafiles/surfac11.ma

#Come up every n hours
behavior: surface
    b_arg: start_when(enum)          9  # 
    b_arg: args_from_file(enum)     10  # read from mafiles/surfac10.ma

behavior: set_heading
    b_arg: use_heading(bool) 4 # in, 1 HM_HEADING
                               # in, 2 HM_ROLL
                               # in, 3 HM_BATTROLL
                               # in, 4 HM_FIN

    b_arg: heading_value(X) 0.2
                         # use_heading == 1 C_HEADING(rad) desired heading
                         # use_heading == 2 C_ROLL(rad),    >0 bank right
                         # use_heading == 3 C_BATTROLL(rad) >0 puts stbd wing down
                         # use_heading == 4 C_FIN(rad),     >0 turns to stbd

    b_arg: start_when(enum) 0     # See doco above
    b_arg: stop_when(enum)  5     # See doco above




behavior: yo
    b_arg: args_from_file(enum)     10   # read from mafiles/yo10.ma

behavior: prepare_to_dive
    b_arg: start_when(enum)          0   # 0-immediately, 1-stack idle 2-depth idle
    b_arg: wait_time(s)            300   # 5 minutes, how long to wait for gps


# sample settings for CTD:
behavior: sample
    b_arg: args_from_file(enum)     10   # >= 0 enables reading from mafiles/sample<N>.ma
# sample settings for other sensors removed
behavior: sample
    b_arg: args_from_file(enum)     11   # >= 0 enables reading from mafiles/sample<N>.ma

# sample settings for microstructure/logger
behavior: sample
    b_arg: args_from_file(enum)     13   # >= 0 enables reading from mafiles/sample<N>.ma

# sample settings for dvl
behavior: sample
    b_arg: args_from_file(enum)     14   # >= 0 enables reading from mafiles/sample<N>.ma

behavior: sensors_in       
    b_arg: c_profile_on(sec)         1
    b_arg: c_logger_on(sec)         -1
    b_arg: c_flntu_on(sec)          -1
    b_arg: c_dvl_on(sec)            -1	
    b_arg: c_att_time(sec)           0   # as fast as possible
    b_arg: c_alt_time(sec)          -1  # disabled
    b_arg: c_pressure_time(sec)      0   # as fast as possible
    b_arg: u_battery_time(sec)      10
    b_arg: u_vacuum_time(sec)       10
    b_arg: c_gps_on(bool)            0  # Special, 1 is on, 0 is off